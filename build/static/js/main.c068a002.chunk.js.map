{"version":3,"sources":["Webform.js","Figures.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Webform","Footer","useState","componentSize","setComponentSize","style","backgroundColor","className","padding","margin","textAlign","align","ContentAlign","labelCol","span","wrapperCol","initialValues","size","onValuesChange","Item","label","Option","value","marginLeft","type","Figures","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","y","renderScene","window","renderer","render","scene1","camera1","width","this","mount","clientWidth","height","clientHeight","THREE","scene2","antialias","setClearColor","setSize","appendChild","domElement","position","z","OrbitControls","add","light","set","addModels","geometry","material","color","removeChild","ref","Component","HomePage","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c068a002.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Select,\r\n  InputNumber,\r\n  Checkbox,\r\n  Button,\r\n  Layout,\r\n  Space\r\n} from \"antd\";\r\nconst { Content, Footer } = Layout;\r\nconst Webform = () => {\r\n  const [componentSize, setComponentSize] = useState(\"default\");\r\n\r\n  const onFormLayoutChange = ({ size }) => {\r\n    setComponentSize(size);\r\n  };\r\n\r\n  return (\r\n   <Layout style ={{backgroundColor:\"black\"}}>\r\n    <Content \r\n      className=\"site-layout\"\r\n      style={{backgroundColor:\"white\",padding: \"30px\", margin: 64,textAlign:\"center\" }}\r\n    >\r\n      \r\n      <Space align=\"center\">\r\n      <Form style={{ContentAlign:\"left\"}}\r\n        labelCol={{\r\n          span: 14\r\n        }}\r\n        wrapperCol={{\r\n          span: 14\r\n        }}\r\n      \r\n      //layout=\"horizontal\"\r\n         initialValues={{\r\n           size: componentSize\r\n         }}\r\n        onValuesChange={onFormLayoutChange}\r\n         size={componentSize}\r\n      >\r\n        <Form.Item label=\"Name of the Object \">\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Shape\">\r\n          <Select>\r\n            \r\n            <Select.Option value=\"sphere\">Sphere</Select.Option>\r\n            <Select.Option value=\"cube\">Cube</Select.Option>\r\n            <Select.Option value=\"cuboid\">Cuboid</Select.Option>\r\n            <Select.Option value=\"cone\">Cone</Select.Option>\r\n            \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Dimensions:X\">\r\n          <Input />   \r\n        </Form.Item>\r\n        <Form.Item label=\"Dimensions:Y\">\r\n          <Input />   \r\n        </Form.Item><Form.Item label=\"Dimensions:Z\">\r\n          <Input />   \r\n        </Form.Item>\r\n        <Form.Item label=\"Colour\">\r\n          <Select>\r\n            <Select.Option value =\"red\">Red</Select.Option>\r\n            <Select.Option value =\"green\">Green</Select.Option>\r\n            <Select.Option value =\"yellow\">Yellow</Select.Option>\r\n            <Select.Option value =\"blue\">Blue</Select.Option>\r\n           <Select.Option value = \"orange\">Orange</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Position\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Render Object\">\r\n          <Checkbox></Checkbox>\r\n        </Form.Item>\r\n        <Form.Item style={{marginLeft:212}}>\r\n          <Button type = \"primary\">Render</Button>\r\n        </Form.Item>\r\n      </Form>\r\n      </Space>\r\n    </Content>\r\n  </Layout>\r\n           \r\n  );\r\n};\r\nexport default Webform;\r\n\r\n//ReactDOM.render(<Webform />, document.getElementById(\"container\"));\r\n","import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\n//import { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\n//import e1 from \"C:/Users/Dev/Documents/react/my-app/src/textures/2_no_clouds_4k.jpg\";\r\n\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n    const width = this.mount.clientWidth;\r\n    const height = this.mount.clientHeight;\r\n    this.scene1 = new THREE.Scene();\r\n    this.scene2 = new THREE.Scene();\r\n\r\n    //Add Renderer\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#ffffff\");\r\n    this.renderer.setSize(width, height);\r\n    this.mount.appendChild(this.renderer.domElement);\r\n\r\n    //add Camera\r\n    this.camera1 = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera1.position.z = 20;\r\n    this.camera1.position.y = 5;\r\n\r\n    //Camera Controls\r\n    const controls = new OrbitControls(this.camera1, this.renderer.domElement);\r\n\r\n    //LIGHTS\r\n    this.scene1.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xFFFFFF,1);\r\n    light.position.set( 10, 10, 10 );\r\n    this.scene1.add( light );\r\n\r\n    var light = new THREE.DirectionalLight(0xFFFFFF,1);\r\n     this.scene1.add(light);\r\n    // var lights = [];\r\n    // lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\r\n    // lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n    // lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n    // lights[0].position.set(10, 10, 10);\r\n    // lights[1].position.set(100, 200, 100);\r\n    // lights[2].position.set(-100, -200, -100);\r\n    // this.scene1.add(lights[0]);\r\n    // this.scene1.add(lights[1]);\r\n    // this.scene1.add(lights[2]);\r\n\r\n    // this.scene2.add(lights[0]);\r\n    // this.scene2.add(lights[1]);\r\n    // this.scene2.add(lights[2]);\r\n    \r\n    //Simple Box with WireFrame\r\n    this.addModels();\r\n\r\n    this.renderScene();\r\n    //start animation\r\n    this.start();\r\n  }\r\n\r\n  addModels() {\r\n    // -----Step 1--------\r\n    // earth =  new THREE.Mesh(\r\n    //   new THREE.SphereGeometry(1, 35, 35),\r\n    //   new THREE.MeshPhongMaterial({\r\n    //     map: THREE.ImageUtils.loadTexture('textures/2_no_clouds_4k.jpg'),\r\n    //     bumpMap: THREE.ImageUtils.loadTexture('textures/elev_bump_4k.jpg'),\r\n    //     bumpScale:   0.005,\r\n    //     specularMap: THREE.ImageUtils.loadTexture('textures/water_4k.png'),\r\n    //     specular: new THREE.Color('grey') })\r\n    // );\r\n \r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      color: \"#0F0\"\r\n    });\r\n    this.cube = new THREE.Mesh(geometry, material);\r\n    this.scene1.add(this.cube);\r\n    this.cube.position.set=(0,0,0);\r\n    const textureLoader = new THREE.TextureLoader();\r\n   // this.cube.material.map = textureLoader.load(e1);\r\n\r\n    //  geometry = new THREE.BoxGeometry(5, 5, 5);\r\n    //  material = new THREE.MeshBasicMaterial({\r\n    //   color: \"#0F0\"\r\n    // });\r\n    // this.cube2 = new THREE.Mesh(geometry, material);\r\n    // this.scene1.add(this.cube2);\r\n    // this.cube2.position.set = (80,30,50);\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n    this.mount.removeChild(this.renderer.domElement);\r\n  }\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  };\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId);\r\n  };\r\n  animate = () => {\r\n   \r\n    if (this.cube) this.cube.rotation.y += 0.01;\r\n    this.renderScene();\r\n    this.frameId = window.requestAnimationFrame(this.animate);\r\n  };\r\n  renderScene = () => {\r\n    if (this.renderer) this.renderer.render(this.scene1, this.camera1);\r\n  };\r\n\r\n \r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"700px\" }}\r\n        ref={mount => {\r\n          this.mount = mount;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Figures;\r\n","import React from 'react';\r\nimport Webform from './Webform.js';\r\nimport Figures from './Figures';\r\nimport { Row, Col, Divider } from 'antd';\r\n\r\n\r\n const HomePage = () => {\r\n     return (\r\n   <Row>\r\n         <Col span={50}>\r\n             <Webform/>\r\n         </Col>\r\n         \r\n\r\n         <Col span={50}>\r\n             <Figures/>\r\n         </Col>\r\n    </Row>\r\n\r\n     );\r\n }\r\n\r\n export default HomePage;","import React from 'react';\nimport HomePage from './HomePage.js';\nimport './App.css';\n//import Figures from './Figures';\n\n\nfunction App() {\n  return (\n    <div>\n             <HomePage/> \n    </div> \n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}