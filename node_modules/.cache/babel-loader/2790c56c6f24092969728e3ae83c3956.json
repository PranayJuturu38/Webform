{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nconst Figures = () => {\n  var width = window.innerWidth;\n  var height = window.innerHeight;\n  const scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n  camera.position.z = 40;\n  camera.position.y = 5;\n  var renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setClearColor(\"#000000\");\n  renderer.setSize(width, height);\n  document.body.appendChild(renderer.domElement);\n  scene.add(new THREE.AmbientLight(0x333333));\n  var light = new THREE.PointLight(0xffffff, 1);\n  light.position.set(10, 10, 10);\n  scene.add(light);\n  light = new THREE.DirectionalLight(0xffffff, 1);\n  scene.add(light);\n  var geometry = new THREE.SphereGeometry(10, 35, 35);\n  var material = new THREE.MeshPhongMaterial({\n    map: THREE.ImageUtils.loadTexture(e1),\n    bumpMap: THREE.ImageUtils.loadTexture(e2),\n    bumpScale: 0.005,\n    specularMap: THREE.ImageUtils.loadTexture(e3),\n    specular: new THREE.Color(\"grey\")\n  });\n  const earthMesh = new THREE.Mesh(geometry, material);\n  scene.add(earthMesh);\n  earthMesh.position.set = (0, 0, 0);\n  this.earthMesh.rotation.y += 0.01;\n  renderer.render(scene, camera);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"1000px\",\n      height: \"692px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","useState","useEffect","THREE","OrbitControls","e1","e2","e3","Figures","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","renderer","WebGLRenderer","antialias","setClearColor","setSize","document","body","appendChild","domElement","add","AmbientLight","light","PointLight","set","DirectionalLight","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","Mesh","rotation","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,EAAP,MAAe,+BAAf;AACA,OAAOC,EAAP,MAAe,6BAAf;AACA,OAAOC,EAAP,MAAe,yBAAf;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAEpB,MAAIC,KAAK,GAAGC,MAAM,CAACC,UAAnB;AACA,MAAIC,MAAM,GAAGF,MAAM,CAACG,WAApB;AAEA,QAAMC,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAV,EAAd;AAEA,MAAIC,MAAM,GAAG,IAAIb,KAAK,CAACc,iBAAV,CAA4B,EAA5B,EAAgCR,KAAK,GAAGG,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAb;AACAI,EAAAA,MAAM,CAACE,QAAP,CAAgBC,CAAhB,GAAoB,EAApB;AACAH,EAAAA,MAAM,CAACE,QAAP,CAAgBE,CAAhB,GAAoB,CAApB;AAEA,MAAIC,QAAQ,GAAI,IAAIlB,KAAK,CAACmB,aAAV,CAAwB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAxB,CAAhB;AACAF,EAAAA,QAAQ,CAACG,aAAT,CAAuB,SAAvB;AACAH,EAAAA,QAAQ,CAACI,OAAT,CAAiBhB,KAAjB,EAAwBG,MAAxB;AACAc,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BP,QAAQ,CAACQ,UAAnC;AAEEf,EAAAA,KAAK,CAACgB,GAAN,CAAU,IAAI3B,KAAK,CAAC4B,YAAV,CAAuB,QAAvB,CAAV;AACA,MAAIC,KAAK,GAAG,IAAI7B,KAAK,CAAC8B,UAAV,CAAqB,QAArB,EAA+B,CAA/B,CAAZ;AACAD,EAAAA,KAAK,CAACd,QAAN,CAAegB,GAAf,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B;AACApB,EAAAA,KAAK,CAACgB,GAAN,CAAUE,KAAV;AAEAA,EAAAA,KAAK,GAAG,IAAI7B,KAAK,CAACgC,gBAAV,CAA2B,QAA3B,EAAqC,CAArC,CAAR;AACArB,EAAAA,KAAK,CAACgB,GAAN,CAAUE,KAAV;AAIA,MAAII,QAAQ,GAAG,IAAIjC,KAAK,CAACkC,cAAV,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,CAAf;AACA,MAAIC,QAAQ,GAAG,IAAInC,KAAK,CAACoC,iBAAV,CAA4B;AACzCC,IAAAA,GAAG,EAAErC,KAAK,CAACsC,UAAN,CAAiBC,WAAjB,CAA6BrC,EAA7B,CADoC;AAEzCsC,IAAAA,OAAO,EAAExC,KAAK,CAACsC,UAAN,CAAiBC,WAAjB,CAA6BpC,EAA7B,CAFgC;AAGzCsC,IAAAA,SAAS,EAAE,KAH8B;AAIzCC,IAAAA,WAAW,EAAE1C,KAAK,CAACsC,UAAN,CAAiBC,WAAjB,CAA6BnC,EAA7B,CAJ4B;AAKzCuC,IAAAA,QAAQ,EAAE,IAAI3C,KAAK,CAAC4C,KAAV,CAAgB,MAAhB;AAL+B,GAA5B,CAAf;AAQA,QAAMC,SAAS,GAAG,IAAI7C,KAAK,CAAC8C,IAAV,CAAeb,QAAf,EAAyBE,QAAzB,CAAlB;AACOxB,EAAAA,KAAK,CAACgB,GAAN,CAAUkB,SAAV;AACAA,EAAAA,SAAS,CAAC9B,QAAV,CAAmBgB,GAAnB,IAA0B,GAAE,CAAF,EAAI,CAA9B;AAEA,OAAKc,SAAL,CAAeE,QAAf,CAAwB9B,CAAxB,IAA6B,IAA7B;AACAC,EAAAA,QAAQ,CAAC8B,MAAT,CAAgBrC,KAAhB,EAAsBE,MAAtB;AAGV,sBACG;AACI,IAAA,KAAK,EAAE;AAAEP,MAAAA,KAAK,EAAE,QAAT;AAAmBG,MAAAA,MAAM,EAAE;AAA3B,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAQA,CAnDD;;AAqDA,eAAeJ,OAAf","sourcesContent":["import React, { Component,useState,useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\nconst Figures = () => {\r\n\r\n  var width = window.innerWidth;\r\n  var height = window.innerHeight;\r\n\r\n  const scene = new THREE.Scene();\r\n  \r\n  var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n  camera.position.z = 40;\r\n  camera.position.y = 5 ;\r\n\r\n  var renderer =  new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setClearColor(\"#000000\");\r\n  renderer.setSize(width, height);\r\n  document.body.appendChild(renderer.domElement);\r\n\r\n    scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n    scene.add(light);\r\n\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    scene.add(light);\r\n\r\n  \r\n    \r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    \r\n    const earthMesh = new THREE.Mesh(geometry, material);\r\n           scene.add(earthMesh);\r\n           earthMesh.position.set = (0,0,0);\r\n          \r\n           this.earthMesh.rotation.y += 0.01;\r\n           renderer.render(scene,camera);\r\n \r\n\r\n return (\r\n    <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n     \r\n    \r\n   />    \r\n );\r\n\r\n};\r\n\r\nexport default Figures;"]},"metadata":{},"sourceType":"module"}