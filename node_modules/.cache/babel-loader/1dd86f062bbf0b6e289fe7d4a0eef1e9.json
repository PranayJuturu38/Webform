{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 30;\n      this.camera.position.y = 5;\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xffffff, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      var lights = new THREE.AmbientLight(0x333333);\n      this.scene.add(lights);\n      lights.position.set(40, 30, 30);\n      light = new THREE.DirectionalLight(0xffffff, 1);\n      this.scene.add(light);\n    };\n\n    this.addShapes = () => {\n      if (this.props.renderobjects.length !== 0) {\n        if (this.props.renderobjects[0][1][1] === \"cube\") {\n          var geometry1 = new THREE.BoxGeometry(this.props.renderobjects[0][6][1], this.props.renderobjects[0][6][1], this.props.renderobjects[0][6][1]);\n          var material1 = new THREE.MeshLambertMaterial({\n            color: this.props.renderobjects[0][2][1]\n          });\n          var boxMesh = new THREE.Mesh(geometry1, material1);\n          this.scene.add(boxMesh);\n          boxMesh.position.set(this.props.renderobjects[0][3][1], this.props.renderobjects[0][4][1], this.props.renderobjects[0][5][1]);\n        } else if (this.props.renderobjects[0][1][1] === \"sphere\") {\n          var geometrys = new THREE.SphereGeometry(this.props.renderobjects[0][6][1], 32, 32);\n          var materials = new THREE.MeshLambertMaterial({\n            color: this.props.renderobjects[0][2][1]\n          });\n          var sphereMesh = new THREE.Mesh(geometrys, materials);\n          this.scene.add(sphereMesh);\n          sphereMesh.position.set(this.props.renderobjects[0][3][1], this.props.renderobjects[0][4][1], this.props.renderobjects[0][5][1]);\n        } else if (this.props.renderobjects[0][1][1] === \"cone\") {\n          var geometryc = new THREE.ConeGeometry(this.props.renderobjects[0][7][1], this.props.renderobjects[0][6][1], 64);\n          var materialc = new THREE.MeshBasicMaterial({\n            color: this.props.renderobjects[0][2][1]\n          });\n          var coneMesh = new THREE.Mesh(geometryc, materialc);\n          this.scene.add(coneMesh);\n          coneMesh.position.set(this.props.renderobjects[0][3][1], this.props.renderobjects[0][4][1], this.props.renderobjects[0][5][1]);\n        } else if (this.props.renderobjects[0][1][1] === \"cuboid\") {\n          var geometrycu = new THREE.BoxGeometry(this.props.renderobjects[0][7][1], this.props.renderobjects[0][8][1], this.props.renderobjects[0][6][1]);\n          var materialcu = new THREE.MeshLambertMaterial({\n            color: this.props.renderobjects[0][1][1]\n          });\n          var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\n          this.scene.add(cuboidMesh);\n          cuboidMesh.position.set(this.props.renderobjects[0][3][1], this.props.renderobjects[0][4][1], this.props.renderobjects[0][5][1]);\n        }\n      }\n    };\n\n    this.addModels = () => {\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: THREE.ImageUtils.loadTexture(e1),\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\n        bumpScale: 0.005,\n        specularMap: THREE.ImageUtils.loadTexture(e3),\n        specular: new THREE.Color(\"grey\")\n      });\n      this.earthMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(this.earthMesh);\n      this.earthMesh.position.set(0, 0, 0);\n    };\n\n    this.start = () => {\n      //this.earthMesh.rotation.x += 0.01;\n      this.earthMesh.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n\n      this.requestID = window.requestAnimationFrame(this.start);\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"didmount\", this.props.renderobjects[1][1]);\n    this.sceneSetup();\n    this.addModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps \", prevProps);\n    console.log(\"prevState \", prevState);\n\n    if (this.props.renderobjects !== prevProps.renderobjects) {\n      console.log(\"positons\", this.props.renderobjects[0][1][1]);\n      this.addShapes();\n    }\n\n    console.log(this.props.renderobjects);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: ref => {\n        this.el = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","Figures","sceneSetup","width","el","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","controls","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","lights","DirectionalLight","addShapes","props","renderobjects","length","geometry1","BoxGeometry","material1","MeshLambertMaterial","color","boxMesh","Mesh","geometrys","SphereGeometry","materials","sphereMesh","geometryc","ConeGeometry","materialc","MeshBasicMaterial","coneMesh","geometrycu","materialcu","cuboidMesh","addModels","geometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","start","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","console","log","addEventListener","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref"],"mappings":"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","sourcesContent":["import React, { Component}  from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\nclass Figures extends Component {\r\n\r\n  componentDidMount() {\r\n    console.log(\"didmount\",this.props.renderobjects[1][1]);\r\n    \r\n    this.sceneSetup();\r\n    this.addModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps \", prevProps);\r\n    console.log(\"prevState \", prevState);\r\n\r\n    if (this.props.renderobjects !== prevProps.renderobjects) {\r\n\r\n      \r\n      console.log(\"positons\",this.props.renderobjects[0][1][1]);\r\n      this.addShapes();\r\n    }\r\n\r\n    console.log(this.props.renderobjects);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.dispose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 30;\r\n    this.camera.position.y = 5;\r\n\r\n    this.controls = new OrbitControls(this.camera, this.el);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n     \r\n    this.scene.add(light);\r\n    var lights = new THREE.AmbientLight(0x333333)\r\n    this.scene.add(lights);\r\n    lights.position.set(40,30,30);\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.scene.add(light);\r\n  };\r\n\r\n  addShapes = () =>{\r\n   \r\n    if(this.props.renderobjects.length !== 0) {\r\n     \r\n    \r\n     if(this.props.renderobjects[0][1][1] === \"cube\")\r\n     {  \r\n      var geometry1 = new THREE.BoxGeometry(this.props.renderobjects[0][6][1],this.props.renderobjects[0][6][1],this.props.renderobjects[0][6][1]);\r\n      var material1 = new THREE.MeshLambertMaterial({color:this.props.renderobjects[0][2][1]});\r\n      var boxMesh = new THREE.Mesh(geometry1, material1);\r\n      \r\n      this.scene.add(boxMesh);\r\n    \r\n     \r\n     boxMesh.position.set(this.props.renderobjects[0][3][1],this.props.renderobjects[0][4][1],this.props.renderobjects[0][5][1]);\r\n      \r\n     \r\n    }\r\n    \r\n    else if(this.props.renderobjects[0][1][1] === \"sphere\")\r\n    {\r\n      var geometrys = new THREE.SphereGeometry(this.props.renderobjects[0][6][1],32,32);\r\n      var materials = new THREE.MeshLambertMaterial({color:this.props.renderobjects[0][2][1]});\r\n      var sphereMesh = new THREE.Mesh(geometrys,materials);\r\n      this.scene.add(sphereMesh);\r\n      sphereMesh.position.set(this.props.renderobjects[0][3][1],this.props.renderobjects[0][4][1],this.props.renderobjects[0][5][1]);\r\n    }\r\n    else if(this.props.renderobjects[0][1][1] === \"cone\")\r\n    {\r\n      var geometryc = new THREE.ConeGeometry(this.props.renderobjects[0][7][1],this.props.renderobjects[0][6][1],64);\r\n      var materialc = new THREE.MeshBasicMaterial({color:this.props.renderobjects[0][2][1]});\r\n      var coneMesh = new THREE.Mesh(geometryc, materialc);\r\n      this.scene.add(coneMesh);\r\n      coneMesh.position.set(this.props.renderobjects[0][3][1],this.props.renderobjects[0][4][1],this.props.renderobjects[0][5][1]);\r\n    } \r\n\r\n    else if(this.props.renderobjects[0][1][1] === \"cuboid\")\r\n    {\r\n     \r\n      var geometrycu = new THREE.BoxGeometry(this.props.renderobjects[0][7][1],this.props.renderobjects[0][8][1],this.props.renderobjects[0][6][1]);\r\n      var materialcu = new THREE.MeshLambertMaterial({color:this.props.renderobjects[0][1][1]});\r\n      var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\r\n      \r\n      this.scene.add(cuboidMesh);\r\n    \r\n     \r\n     cuboidMesh.position.set(this.props.renderobjects[0][3][1],this.props.renderobjects[0][4][1],this.props.renderobjects[0][5][1]);\r\n     \r\n    }\r\n    \r\n    }\r\n  };\r\n  addModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    this.earthMesh = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    this.earthMesh.position.set(0, 0, 0);\r\n    \r\n    \r\n    };\r\n  start = () => {\r\n    //this.earthMesh.rotation.x += 0.01;\r\n    this.earthMesh.rotation.y += 0.01;\r\n    \r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    this.requestID = window.requestAnimationFrame(this.start);\r\n  };\r\n  handleWindowResize = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          this.el = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}