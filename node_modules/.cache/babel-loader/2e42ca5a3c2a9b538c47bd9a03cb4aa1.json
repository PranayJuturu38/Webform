{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\nimport canvasCloud from \"./textures/earthcloudmap.jpg\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      const width = this.mount.clientWidth;\n      const height = this.mount.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 20;\n      this.camera.position.y = 5;\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.mount.appendChild(this.renderer.domElement);\n      const controls = new OrbitControls(this.camera1, this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xFFFFFF, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      var light = new THREE.DirectionalLight(0xFFFFFF, 1);\n      this.scene.add(light);\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\n      if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene1, this.camera1);\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.displose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","canvasCloud","Figures","sceneSetup","width","mount","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","controls","camera1","add","AmbientLight","light","PointLight","set","DirectionalLight","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","earthMesh","rotation","cloudMesh","renderScene","window","render","scene1","componentDidMount","addModels","addEventListener","handleWindowResize","componentWillUnmount","removeEventListener","requestID","displose"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\"\r\nimport e3 from \"./textures/water_4k.png\"\r\nimport canvasCloud from \"./textures/earthcloudmap.jpg\"\r\n\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n\r\n    this.sceneSetup();\r\n    this.addModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\",this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\",this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.displose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.mount.clientWidth;\r\n    const height = this.mount.clientHeight;\r\n    \r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 20;\r\n    this.camera.position.y = 5;\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.mount.appendChild(this.renderer.domElement);\r\n\r\n    \r\n    const controls = new OrbitControls(this.camera1, this.renderer.domElement);\r\n\r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xFFFFFF,1);\r\n    light.position.set( 10, 10, 10 );\r\n    this.scene.add( light );\r\n\r\n    var light = new THREE.DirectionalLight(0xFFFFFF,1);\r\n     this.scene.add(light)\r\n\r\n  }\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  };\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId);\r\n  };\r\n  animate = () => {\r\n   \r\n    if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\r\n    if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\r\n    this.renderScene();\r\n    this.frameId = window.requestAnimationFrame(this.animate);\r\n  };\r\n  renderScene = () => {\r\n    if (this.renderer) this.renderer.render(this.scene1, this.camera1);\r\n  };\r\n\r\n \r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={mount => {\r\n          this.mount = mount;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}