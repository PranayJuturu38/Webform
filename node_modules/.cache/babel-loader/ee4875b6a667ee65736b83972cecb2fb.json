{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\nimport canvasCloud from \"./textures/earthcloudmap.jpg\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\n      if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene1, this.camera1);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene1 = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor(\"#000000\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.camera1 = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera1.position.z = 20;\n    this.camera1.position.y = 5;\n    const controls = new OrbitControls(this.camera1, this.renderer.domElement);\n    this.scene1.add(new THREE.AmbientLight(0x333333));\n    var light = new THREE.PointLight(0xFFFFFF, 1);\n    light.position.set(10, 10, 10);\n    this.scene1.add(light);\n    var light = new THREE.DirectionalLight(0xFFFFFF, 1);\n    this.scene1.add(light);\n    this.addModels();\n    this.renderScene();\n    this.start();\n  }\n\n  addModels() {\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\n    var material = new THREE.MeshPhongMaterial({\n      map: THREE.ImageUtils.loadTexture(e1),\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\n      bumpScale: 0.005,\n      specularMap: THREE.ImageUtils.loadTexture(e3),\n      specular: new THREE.Color('grey')\n    });\n    this.earthMesh = new THREE.Mesh(geometry, material);\n    this.scene1.add(this.earthMesh);\n    this.earthMesh.position.set = (0, 0, 0);\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\n    var material = new THREE.MeshPhongMaterial({\n      map: new THREE.Texture(canvasCloud),\n      side: THREE.DoubleSide,\n      opacity: 0.8,\n      transparent: true,\n      depthWrite: false\n    });\n    var cloudMesh = new THREE.Mesh(geometry, material);\n    this.earthMesh.add(cloudMesh);\n    var geometry = new THREE.BoxGeometry(10, 10, 10);\n    var material = new THREE.MeshBasicMaterial();\n    var boxMesh = new THREE.Mesh(geometry, material);\n    this.scene1.add(boxMesh);\n    boxMesh.position.set(20, 20, 20);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","canvasCloud","Figures","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","earthMesh","rotation","y","cloudMesh","renderScene","window","renderer","render","scene1","camera1","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","PerspectiveCamera","position","z","controls","add","AmbientLight","light","PointLight","set","DirectionalLight","addModels","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","Mesh","Texture","side","DoubleSide","opacity","transparent","depthWrite","BoxGeometry","MeshBasicMaterial","boxMesh","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\"\r\nimport e3 from \"./textures/water_4k.png\"\r\nimport canvasCloud from \"./textures/earthcloudmap.jpg\"\r\n\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n\r\n    const width = this.mount.clientWidth;\r\n    const height = this.mount.clientHeight;\r\n    \r\n    this.scene1 = new THREE.Scene();\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.mount.appendChild(this.renderer.domElement);\r\n\r\n    this.camera1 = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera1.position.z = 20;\r\n    this.camera1.position.y = 5;\r\n\r\n    const controls = new OrbitControls(this.camera1, this.renderer.domElement);\r\n\r\n    this.scene1.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xFFFFFF,1);\r\n    light.position.set( 10, 10, 10 );\r\n    this.scene1.add( light );\r\n\r\n    var light = new THREE.DirectionalLight(0xFFFFFF,1);\r\n     this.scene1.add(light);\r\n    \r\n    this.addModels();\r\n\r\n    this.renderScene();\r\n    \r\n    this.start();\r\n  }\r\n\r\n  addModels() {\r\n   \r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n        bumpScale:   0.005,\r\n        specularMap: THREE.ImageUtils.loadTexture(e3),\r\n        specular: new THREE.Color('grey') }\r\n\r\n    );\r\n    this.earthMesh= new THREE.Mesh(geometry, material);\r\n    this.scene1.add(this.earthMesh);\r\n    this.earthMesh.position.set=(0,0,0);\r\n   \r\n    var geometry   = new THREE.SphereGeometry(10, 35, 35);\r\n    var material  = new THREE.MeshPhongMaterial({\r\n                  map         : new THREE.Texture(canvasCloud),\r\n                  side        : THREE.DoubleSide,\r\n                  opacity     : 0.8,\r\n                  transparent : true,\r\n                  depthWrite  : false,\r\n                 });\r\n      var cloudMesh = new THREE.Mesh(geometry, material);\r\n      this.earthMesh.add(cloudMesh);\r\n\r\n      var geometry = new THREE.BoxGeometry(10,10,10);\r\n      var material = new THREE.MeshBasicMaterial();\r\n      var boxMesh = new THREE.Mesh(geometry, material);\r\n      this.scene1.add(boxMesh);\r\n      boxMesh.position.set(20,20,20);\r\n   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n    this.mount.removeChild(this.renderer.domElement);\r\n  }\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  };\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId);\r\n  };\r\n  animate = () => {\r\n   \r\n    if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\r\n    if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\r\n    this.renderScene();\r\n    this.frameId = window.requestAnimationFrame(this.animate);\r\n  };\r\n  renderScene = () => {\r\n    if (this.renderer) this.renderer.render(this.scene1, this.camera1);\r\n  };\r\n\r\n \r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={mount => {\r\n          this.mount = mount;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}