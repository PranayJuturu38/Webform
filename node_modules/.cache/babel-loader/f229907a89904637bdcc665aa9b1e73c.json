{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\nimport canvasCloud from \"./textures/earthcloudmap.jpg\";\nimport Webform from \"./Webform\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 20;\n      this.camera.position.y = 5;\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xFFFFFF, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      var light = new THREE.DirectionalLight(0xFFFFFF, 1);\n      this.scene.add(light);\n    };\n\n    this.addModels = props => {\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: THREE.ImageUtils.loadTexture(e1),\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\n        bumpScale: 0.005,\n        specularMap: THREE.ImageUtils.loadTexture(e3),\n        specular: new THREE.Color('grey')\n      });\n      this.earthMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(this.earthMesh);\n      this.earthMesh.position.set = (0, 0, 0);\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: new THREE.Texture(canvasCloud),\n        side: THREE.DoubleSide,\n        opacity: 0.8,\n        transparent: true,\n        depthWrite: false\n      });\n      var geometry = new THREE.BoxGeometry(10, 10, 10);\n      var material = new THREE.MeshBasicMaterial();\n      var boxMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(boxMesh);\n      boxMesh.position.set(20, 20, 20);\n    };\n\n    this.start = () => {\n      //this.earthMesh.rotation.x += 0.01;\n      this.earthMesh.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n\n      this.requestID = window.requestAnimationFrame(this.start);\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: ref => {\n        this.el = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    });\n  }\n\n} // class Container extends React.Component {\n//   state = { isMounted: true };\n//   render() {\n//     const { isMounted = true } = this.state;\n//     return (\n//       <>\n//         <button\n//           onClick={() =>\n//             this.setState(state => ({ isMounted: !state.isMounted }))\n//           }\n//         >\n//           {isMounted ? \"Unmount\" : \"Mount\"}\n//         </button>\n//         {isMounted && <App />}\n//         {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n//       </>\n//     );\n//   }\n// }\n\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","canvasCloud","Webform","Figures","sceneSetup","width","el","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","controls","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","DirectionalLight","addModels","props","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","Mesh","Texture","side","DoubleSide","opacity","transparent","depthWrite","BoxGeometry","MeshBasicMaterial","boxMesh","start","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\nimport canvasCloud from \"./textures/earthcloudmap.jpg\";\r\nimport Webform from \"./Webform\";\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n\r\n    this.sceneSetup();\r\n    this.addModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\",this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\",this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.dispose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n    \r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 20;\r\n    this.camera.position.y = 5;\r\n\r\n    this.controls = new OrbitControls(this.camera, this.el);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    \r\n    \r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xFFFFFF,1);\r\n    light.position.set( 10, 10, 10 );\r\n    this.scene.add( light );\r\n\r\n    var light = new THREE.DirectionalLight(0xFFFFFF,1);\r\n     this.scene.add(light)\r\n\r\n  };\r\n\r\n  addModels = props => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n        bumpScale:   0.005,\r\n        specularMap: THREE.ImageUtils.loadTexture(e3),\r\n        specular: new THREE.Color('grey') }\r\n\r\n    );\r\n    this.earthMesh= new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    this.earthMesh.position.set=(0,0,0);\r\n   \r\n    var geometry   = new THREE.SphereGeometry(10, 35, 35);\r\n    var material  = new THREE.MeshPhongMaterial({\r\n                  map         : new THREE.Texture(canvasCloud),\r\n                  side        : THREE.DoubleSide,\r\n                  opacity     : 0.8,\r\n                  transparent : true,\r\n                  depthWrite  : false,\r\n                 });\r\n  \r\n      var geometry = new THREE.BoxGeometry(10,10,10);\r\n      var material = new THREE.MeshBasicMaterial();\r\n      var boxMesh = new THREE.Mesh(geometry, material);\r\n      this.scene.add(boxMesh);\r\n      boxMesh.position.set(20,20,20);\r\n\r\n  };\r\n  start = () => {\r\n    //this.earthMesh.rotation.x += 0.01;\r\n    this.earthMesh.rotation.y += 0.01;\r\n\r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    this.requestID = window.requestAnimationFrame(this.start);\r\n  };\r\n  handleWindowResize = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={ref => {\r\n          this.el = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n// class Container extends React.Component {\r\n//   state = { isMounted: true };\r\n\r\n//   render() {\r\n//     const { isMounted = true } = this.state;\r\n//     return (\r\n//       <>\r\n//         <button\r\n//           onClick={() =>\r\n//             this.setState(state => ({ isMounted: !state.isMounted }))\r\n//           }\r\n//         >\r\n//           {isMounted ? \"Unmount\" : \"Mount\"}\r\n//         </button>\r\n//         {isMounted && <App />}\r\n//         {isMounted && <div>Scroll to zoom, drag to rotate</div>}\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}