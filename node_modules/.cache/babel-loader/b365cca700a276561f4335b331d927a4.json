{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nconst Figures = () => {\n  useEffect(() => {\n    console.log(this.props.renderobjects);\n    sceneSetup();\n    addModels();\n    start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    return () => {\n      window.removeEventListener(\"resize\", this.handleWindowResize);\n      window.cancelAnimationFrame(this.requestID);\n      this.controls.dispose();\n    };\n  });\n\n  const sceneSetup = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 30;\n    camera.position.y = 5;\n    const controls = new OrbitControls(this.camera, this.el);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement);\n    scene.add(new THREE.AmbientLight(0x333333));\n    var light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(10, 10, 10);\n    scene.add(light);\n    light = new THREE.DirectionalLight(0xffffff, 1);\n    scene.add(light);\n  };\n\n  const addModels = () => {\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\n    var material = new THREE.MeshPhongMaterial({\n      map: THREE.ImageUtils.loadTexture(e1),\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\n      bumpScale: 0.005,\n      specularMap: THREE.ImageUtils.loadTexture(e3),\n      specular: new THREE.Color(\"grey\")\n    });\n    const earthMesh = new THREE.Mesh(geometry, material);\n    this.scene.add(this.earthMesh);\n    earthMesh.position.set = (0, 0, 0);\n    var geometry = new THREE.BoxGeometry(10, 10, 10);\n    var material = new THREE.MeshBasicMaterial();\n    var boxMesh = new THREE.Mesh(geometry, material);\n    scene.add(boxMesh);\n    boxMesh.position.set = (20, 20, 20);\n  };\n\n  const start = () => {\n    //this.earthMesh.rotation.x += 0.01;\n    this.earthMesh.rotation.y += 0.01;\n    this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n\n    this.requestID = window.requestAnimationFrame(this.start);\n  };\n\n  const handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n\n    this.camera.updateProjectionMatrix();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"1000px\",\n      height: \"692px\"\n    },\n    ref: ref => {\n      this.el = ref;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","useState","useEffect","THREE","OrbitControls","e1","e2","e3","Figures","console","log","props","renderobjects","sceneSetup","addModels","start","window","addEventListener","handleWindowResize","removeEventListener","cancelAnimationFrame","requestID","controls","dispose","width","el","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","DirectionalLight","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","Mesh","BoxGeometry","MeshBasicMaterial","boxMesh","rotation","render","requestAnimationFrame","aspect","updateProjectionMatrix","ref"],"mappings":"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","sourcesContent":["import React, { Component,useState,useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\nconst Figures =  () =>{\r\n\r\n  useEffect(() => {\r\n  \r\n    console.log(this.props.renderobjects);\r\n    sceneSetup();\r\n    addModels();\r\n    start();\r\n    \r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"resize\", this.handleWindowResize);\r\n      window.cancelAnimationFrame(this.requestID);\r\n      this.controls.dispose();\r\n   }\r\n  \r\n  });\r\n\r\nconst sceneSetup = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n   const scene = new THREE.Scene();\r\n\r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.z = 30;\r\n    camera.position.y = 5;\r\n\r\n    const controls = new OrbitControls(this.camera, this.el);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setClearColor(\"#000000\");\r\n    renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n    scene.add(light);\r\n\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    scene.add(light);\r\n  };\r\n\r\n  const addModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    const earthMesh = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    earthMesh.position.set = (0, 0, 0);\r\n  \r\n    var geometry = new THREE.BoxGeometry(10,10,10);\r\n    var material = new THREE.MeshBasicMaterial();\r\n    var boxMesh = new THREE.Mesh(geometry, material);\r\n    scene.add(boxMesh);\r\n    boxMesh.position.set = (20, 20, 20);\r\n  };\r\n  const start = () => {\r\n    //this.earthMesh.rotation.x += 0.01;\r\n    this.earthMesh.rotation.y += 0.01;\r\n\r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    this.requestID = window.requestAnimationFrame(this.start);\r\n  };\r\n  const handleWindowResize = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          this.el = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}