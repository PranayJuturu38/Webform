{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\nimport canvasCloud from \"./textures/earthcloudmap.jpg\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      const width = this.el.cientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 20;\n      this.camera.position.y = 5;\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xFFFFFF, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      var light = new THREE.DirectionalLight(0xFFFFFF, 1);\n      this.scene.add(light);\n    };\n\n    this.addModels = () => {\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: THREE.ImageUtils.loadTexture(e1),\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\n        bumpScale: 0.005,\n        specularMap: THREE.ImageUtils.loadTexture(e3),\n        specular: new THREE.Color('grey')\n      });\n      this.earthMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(this.earthMesh);\n      this.earthMesh.position.set = (0, 0, 0);\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: new THREE.Texture(canvasCloud),\n        side: THREE.DoubleSide,\n        opacity: 0.8,\n        transparent: true,\n        depthWrite: false\n      });\n      var cloudMesh = new THREE.Mesh(geometry, material);\n      this.earthMesh.add(cloudMesh);\n      var geometry = new THREE.BoxGeometry(10, 10, 10);\n      var material = new THREE.MeshBasicMaterial();\n      var boxMesh = new THREE.Mesh(geometry, material);\n      this.scene1.add(boxMesh);\n      boxMesh.position.set(20, 20, 20);\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\n      if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene1, this.camera1);\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.displose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","canvasCloud","Figures","sceneSetup","width","el","cientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","controls","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","DirectionalLight","addModels","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","Mesh","Texture","side","DoubleSide","opacity","transparent","depthWrite","cloudMesh","BoxGeometry","MeshBasicMaterial","boxMesh","scene1","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","rotation","renderScene","window","render","camera1","componentDidMount","addEventListener","handleWindowResize","componentWillUnmount","removeEventListener","requestID","displose","mount"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\"\r\nimport e3 from \"./textures/water_4k.png\"\r\nimport canvasCloud from \"./textures/earthcloudmap.jpg\"\r\n\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n\r\n    this.sceneSetup();\r\n    this.addModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\",this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\",this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.displose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.el.cientWidth;\r\n    const height = this.el.clientHeight;\r\n    \r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 20;\r\n    this.camera.position.y = 5;\r\n\r\n    this.controls = new OrbitControls(this.camera, this.el);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    \r\n    \r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xFFFFFF,1);\r\n    light.position.set( 10, 10, 10 );\r\n    this.scene.add( light );\r\n\r\n    var light = new THREE.DirectionalLight(0xFFFFFF,1);\r\n     this.scene.add(light)\r\n\r\n  }\r\n  addModels = () => {\r\n\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n        bumpScale:   0.005,\r\n        specularMap: THREE.ImageUtils.loadTexture(e3),\r\n        specular: new THREE.Color('grey') }\r\n\r\n    );\r\n    this.earthMesh= new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    this.earthMesh.position.set=(0,0,0);\r\n   \r\n    var geometry   = new THREE.SphereGeometry(10, 35, 35);\r\n    var material  = new THREE.MeshPhongMaterial({\r\n                  map         : new THREE.Texture(canvasCloud),\r\n                  side        : THREE.DoubleSide,\r\n                  opacity     : 0.8,\r\n                  transparent : true,\r\n                  depthWrite  : false,\r\n                 });\r\n      var cloudMesh = new THREE.Mesh(geometry, material);\r\n      this.earthMesh.add(cloudMesh);\r\n\r\n      var geometry = new THREE.BoxGeometry(10,10,10);\r\n      var material = new THREE.MeshBasicMaterial();\r\n      var boxMesh = new THREE.Mesh(geometry, material);\r\n      this.scene1.add(boxMesh);\r\n      boxMesh.position.set(20,20,20);\r\n\r\n  }\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  };\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId);\r\n  };\r\n  animate = () => {\r\n   \r\n    if (this.earthMesh) this.earthMesh.rotation.y += 0.01;\r\n    if (this.cloudMesh) this.cloudMesh.rotation.y += 0.01;\r\n    this.renderScene();\r\n    this.frameId = window.requestAnimationFrame(this.animate);\r\n  };\r\n  renderScene = () => {\r\n    if (this.renderer) this.renderer.render(this.scene1, this.camera1);\r\n  };\r\n\r\n \r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={mount => {\r\n          this.mount = mount;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}