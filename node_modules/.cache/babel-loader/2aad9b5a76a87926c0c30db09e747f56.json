{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nconst Figures = props => {\n  let el;\n  let scene, width, height, requestID, controls, earthMesh, camera, renderer;\n\n  const addShapes = () => {\n    console.log(\"addShapes\", props.dimensions);\n\n    if (props.dimensions.length !== 0) {\n      props.dimensions.map(dim => {\n        if (dim[1][1] === \"cube\") {\n          console.log(\"cube\", props.dimensions);\n          var geometry1 = new THREE.BoxGeometry(dim[6][1], dim[6][1], dim[6][1]);\n          var material1 = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var boxMesh = new THREE.Mesh(geometry1, material1);\n          scene.add(boxMesh);\n          boxMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"sphere\") {\n          console.log(\"sphere\", props.dimensions);\n          var geometrys = new THREE.SphereGeometry(dim[6][1], 32, 32);\n          var materials = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var sphereMesh = new THREE.Mesh(geometrys, materials);\n          scene.add(sphereMesh);\n          sphereMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"cone\") {\n          var geometryc = new THREE.ConeGeometry(dim[7][1], dim[6][1], 64);\n          var materialc = new THREE.MeshBasicMaterial({\n            color: dim[2][1]\n          });\n          var coneMesh = new THREE.Mesh(geometryc, materialc);\n          scene.add(coneMesh);\n          coneMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"cuboid\") {\n          var geometrycu = new THREE.BoxGeometry(dim[7][1], dim[8][1], dim[6][1]);\n          var materialcu = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\n          scene.add(cuboidMesh);\n          cuboidMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        }\n      });\n    }\n\n    console.log(\"Afteraddshapes\", props.dimensions);\n  };\n\n  const sceneSetup = () => {\n    width = el.clientWidth;\n    height = el.clientHeight;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 30;\n    camera.position.y = 5;\n    controls = new OrbitControls(camera, el);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n    el.appendChild(renderer.domElement);\n    scene.add(new THREE.AmbientLight(0x333333));\n    var light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(10, 10, 10);\n    scene.add(light);\n    var lights = new THREE.AmbientLight(0x333333);\n    scene.add(lights);\n    lights.position.set(40, 30, 30);\n    light = new THREE.DirectionalLight(0xffffff, 1);\n    scene.add(light);\n  };\n\n  const addModels = () => {\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\n    var material = new THREE.MeshPhongMaterial({\n      map: THREE.ImageUtils.loadTexture(e1),\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\n      bumpScale: 0.005,\n      specularMap: THREE.ImageUtils.loadTexture(e3),\n      specular: new THREE.Color(\"grey\")\n    });\n    earthMesh = new THREE.Mesh(geometry, material);\n    scene.add(earthMesh);\n    earthMesh.position.set(0, 0, 0);\n  };\n\n  const start = () => {\n    //earthMesh.rotation.x += 0.01;\n    earthMesh.rotation.y += 0.01;\n    renderer.render(scene, camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n\n    requestID = window.requestAnimationFrame(start);\n  };\n\n  const handleWindowResize = () => {\n    width = el.clientWidth;\n    height = el.clientHeight;\n    renderer.setSize(width, height);\n    camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n\n    camera.updateProjectionMatrix();\n  };\n\n  useEffect(() => {\n    sceneSetup();\n    addModels();\n    start();\n    window.addEventListener(\"resize\", handleWindowResize);\n\n    if (props.dimensions.length > 0) {\n      console.log(\"Positions\", props.dimensions);\n      addShapes();\n    }\n\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n      window.cancelAnimationFrame(requestID);\n      controls.dispose();\n    };\n  }, [props.dimensions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"1000px\",\n      height: \"692px\"\n    },\n    ref: ref => {\n      el = ref;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","useEffect","THREE","OrbitControls","e1","e2","e3","Figures","props","el","scene","width","height","requestID","controls","earthMesh","camera","renderer","addShapes","console","log","dimensions","length","map","dim","geometry1","BoxGeometry","material1","MeshLambertMaterial","color","boxMesh","Mesh","add","position","set","geometrys","SphereGeometry","materials","sphereMesh","geometryc","ConeGeometry","materialc","MeshBasicMaterial","coneMesh","geometrycu","materialcu","cuboidMesh","sceneSetup","clientWidth","clientHeight","Scene","PerspectiveCamera","z","y","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","AmbientLight","light","PointLight","lights","DirectionalLight","addModels","geometry","material","MeshPhongMaterial","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","start","rotation","render","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref"],"mappings":"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","sourcesContent":["import React, { useEffect }  from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\n\r\nconst Figures =  (props) => {\r\n  let el;\r\n  let scene,width,height,requestID,controls,earthMesh,camera,renderer;\r\n\r\n\r\n  const addShapes = () =>{\r\n    console.log(\"addShapes\",props.dimensions);\r\n    \r\n   \r\n    if(props.dimensions.length !== 0) {\r\n    \r\n      props.dimensions.map((dim) =>{\r\n        if(dim[1][1] === \"cube\")\r\n        {  \r\n          console.log(\"cube\",props.dimensions);\r\n         var geometry1 = new THREE.BoxGeometry(dim[6][1],dim[6][1],dim[6][1]);\r\n         var material1 = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n         var boxMesh = new THREE.Mesh(geometry1, material1);\r\n         \r\n        scene.add(boxMesh);\r\n       \r\n        \r\n        boxMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n         \r\n        \r\n       }\r\n       else if(dim[1][1] === \"sphere\")\r\n       {\r\n        console.log(\"sphere\",props.dimensions);\r\n         var geometrys = new THREE.SphereGeometry(dim[6][1],32,32);\r\n         var materials = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n         var sphereMesh = new THREE.Mesh(geometrys,materials);\r\n         scene.add(sphereMesh);\r\n         sphereMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n       }\r\n       else if(dim[1][1] === \"cone\")\r\n       {\r\n         var geometryc = new THREE.ConeGeometry(dim[7][1],dim[6][1],64);\r\n         var materialc = new THREE.MeshBasicMaterial({color:dim[2][1]});\r\n         var coneMesh = new THREE.Mesh(geometryc, materialc);\r\n         scene.add(coneMesh);\r\n         coneMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n       } \r\n   \r\n       else if(dim[1][1] === \"cuboid\")\r\n       {\r\n        \r\n         var geometrycu = new THREE.BoxGeometry(dim[7][1],dim[8][1],dim[6][1]);\r\n         var materialcu = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n         var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\r\n         \r\n         scene.add(cuboidMesh);\r\n       \r\n        \r\n        cuboidMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n        \r\n       }\r\n       \r\n      } )\r\n    \r\n  \r\n    }\r\n    console.log(\"Afteraddshapes\",props.dimensions);\r\n  };\r\n \r\n  \r\n  const sceneSetup = () => {\r\n     width = el.clientWidth;\r\n     height = el.clientHeight;\r\n\r\n     scene = new THREE.Scene();\r\n\r\n     camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.z = 30;\r\n    camera.position.y = 5;\r\n\r\n      controls = new OrbitControls(camera, el);\r\n\r\n renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setClearColor(\"#000000\");\r\n    renderer.setSize(width, height);\r\n    el.appendChild(renderer.domElement);\r\n\r\n    scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n     \r\n    scene.add(light);\r\n    var lights = new THREE.AmbientLight(0x333333)\r\n    scene.add(lights);\r\n    lights.position.set(40,30,30);\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    scene.add(light);\r\n  };\r\n\r\n  const addModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    earthMesh = new THREE.Mesh(geometry, material);\r\n    scene.add(earthMesh);\r\n    earthMesh.position.set(0, 0, 0);\r\n    \r\n    \r\n    };\r\n  const start = () => {\r\n    //earthMesh.rotation.x += 0.01;\r\n    earthMesh.rotation.y += 0.01;\r\n    \r\n    renderer.render(scene,camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    requestID = window.requestAnimationFrame(start);\r\n  };\r\n  const handleWindowResize = () => {\r\n  width = el.clientWidth;\r\n   height = el.clientHeight;\r\n\r\n    renderer.setSize(width, height);\r\n    camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    camera.updateProjectionMatrix();\r\n  };\r\n  useEffect(() =>{\r\n\r\n    sceneSetup();\r\n    addModels();\r\n    start();\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n  \r\n    \r\n    if ((props.dimensions.length > 0)) {\r\n        \r\n      console.log(\"Positions\",props.dimensions);\r\n      addShapes();\r\n    }\r\n  \r\n    return ()=>  {\r\n  \r\n      window.removeEventListener(\"resize\",handleWindowResize);\r\n    window.cancelAnimationFrame(requestID);\r\n    controls.dispose();\r\n  }\r\n  \r\n   },[props.dimensions])\r\n  \r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          el = ref;\r\n        }}\r\n      />\r\n    );\r\n  \r\n}\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}