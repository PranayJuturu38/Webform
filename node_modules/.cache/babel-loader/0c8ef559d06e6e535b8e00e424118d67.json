{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nconst Figures = props => {\n  let el;\n  useEffect(() => {\n    sceneSetup();\n    addModels();\n    start();\n    window.addEventListener(\"resize\", handleWindowResize);\n\n    if (props.dimensions.length > 0) {\n      console.log(\"Positions\", props.dimensions);\n      addShapes();\n    }\n\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowResize);\n      window.cancelAnimationFrame(requestID);\n      controls.dispose();\n    };\n  }, [props.dimensions]);\n\n  const sceneSetup = () => {\n    const width = el.clientWidth;\n    const height = el.clientHeight;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 30;\n    camera.position.y = 5;\n    const controls = new OrbitControls(camera, el);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setClearColor(\"#000000\");\n    renderer.setSize(width, height);\n    el.appendChild(renderer.domElement);\n    scene.add(new THREE.AmbientLight(0x333333));\n    var light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(10, 10, 10);\n    scene.add(light);\n    var lights = new THREE.AmbientLight(0x333333);\n    scene.add(lights);\n    lights.position.set(40, 30, 30);\n    light = new THREE.DirectionalLight(0xffffff, 1);\n    scene.add(light);\n  };\n\n  const addModels = () => {\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\n    var material = new THREE.MeshPhongMaterial({\n      map: THREE.ImageUtils.loadTexture(e1),\n      bumpMap: THREE.ImageUtils.oadTexture(e2),\n      bumpScale: 0.005,\n      specularMap: THREE.ImageUtils.loadTexture(e3),\n      specular: new THREE.Color(\"grey\")\n    });\n    earthMesh = new THREE.Mesh(geometry, material);\n    scene.add(earthMesh);\n    earthMesh.position.set(0, 0, 0);\n  };\n\n  const addShapes = () => {\n    console.log(\"addShapes\", props.dimensions);\n\n    if (props.dimensions.length !== 0) {\n      props.dimensions.map(dim => {\n        if (dim[1][1] === \"cube\") {\n          console.log(\"cube\", props.dimensions);\n          var geometry1 = new THREE.BoxGeometry(dim[6][1], dim[6][1], dim[6][1]);\n          var material1 = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var boxMesh = new THREE.Mesh(geometry1, material1);\n          scene.add(boxMesh);\n          boxMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"sphere\") {\n          console.log(\"sphere\", props.dimensions);\n          var geometrys = new THREE.SphereGeometry(dim[6][1], 32, 32);\n          var materials = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var sphereMesh = new THREE.Mesh(geometrys, materials);\n          scene.add(sphereMesh);\n          sphereMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"cone\") {\n          var geometryc = new THREE.ConeGeometry(dim[7][1], dim[6][1], 64);\n          var materialc = new THREE.MeshBasicMaterial({\n            color: dim[2][1]\n          });\n          var coneMesh = new THREE.Mesh(geometryc, materialc);\n          scene.add(coneMesh);\n          coneMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        } else if (dim[1][1] === \"cuboid\") {\n          var geometrycu = new THREE.BoxGeometry(dim[7][1], dim[8][1], dim[6][1]);\n          var materialcu = new THREE.MeshLambertMaterial({\n            color: dim[2][1]\n          });\n          var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\n          scene.add(cuboidMesh);\n          cuboidMesh.position.set(dim[3][1], dim[4][1], dim[5][1]);\n        }\n      });\n    }\n\n    console.log(\"Afteraddshapes\", props.dimensions);\n  };\n\n  const start = () => {\n    //earthMesh.rotation.x += 0.01;\n    earthMesh.rotation.y += 0.01;\n    renderer.render(scene, camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n\n    requestID = window.requestAnimationFrame(start);\n  };\n\n  const handleWindowResize = () => {\n    const width = el.clientWidth;\n    const height = el.clientHeight;\n    renderer.setSize(width, height);\n    camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n\n    camera.updateProjectionMatrix();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"1000px\",\n      height: \"692px\"\n    },\n    ref: ref => {\n      el = ref;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","useEffect","THREE","OrbitControls","e1","e2","e3","Figures","props","el","sceneSetup","addModels","start","window","addEventListener","handleWindowResize","dimensions","length","console","log","addShapes","removeEventListener","cancelAnimationFrame","requestID","controls","dispose","width","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","lights","DirectionalLight","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","oadTexture","bumpScale","specularMap","specular","Color","earthMesh","Mesh","dim","geometry1","BoxGeometry","material1","MeshLambertMaterial","color","boxMesh","geometrys","materials","sphereMesh","geometryc","ConeGeometry","materialc","MeshBasicMaterial","coneMesh","geometrycu","materialcu","cuboidMesh","rotation","render","requestAnimationFrame","aspect","updateProjectionMatrix","ref"],"mappings":"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","sourcesContent":["import React, { useEffect }  from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\n\r\nconst Figures =  (props) => {\r\n  let el;\r\n  useEffect(() =>{\r\n\r\n  sceneSetup();\r\n  addModels();\r\n  start();\r\n  window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n  \r\n  if ((props.dimensions.length > 0)) {\r\n      \r\n    console.log(\"Positions\",props.dimensions);\r\n    addShapes();\r\n  }\r\n\r\n  return ()=>  {\r\n\r\n    window.removeEventListener(\"resize\",handleWindowResize);\r\n  window.cancelAnimationFrame(requestID);\r\n  controls.dispose();\r\n}\r\n\r\n },[props.dimensions])\r\n\r\n  \r\n  \r\n  const sceneSetup = () => {\r\n    const width = el.clientWidth;\r\n    const height = el.clientHeight;\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.z = 30;\r\n    camera.position.y = 5;\r\n\r\n    const  controls = new OrbitControls(camera, el);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setClearColor(\"#000000\");\r\n    renderer.setSize(width, height);\r\n    el.appendChild(renderer.domElement);\r\n\r\n    scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n     \r\n    scene.add(light);\r\n    var lights = new THREE.AmbientLight(0x333333)\r\n    scene.add(lights);\r\n    lights.position.set(40,30,30);\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    scene.add(light);\r\n  };\r\n\r\n  const addModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.oadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    earthMesh = new THREE.Mesh(geometry, material);\r\n    scene.add(earthMesh);\r\n    earthMesh.position.set(0, 0, 0);\r\n    \r\n    \r\n    };\r\n    const addShapes = () =>{\r\n      console.log(\"addShapes\",props.dimensions);\r\n      \r\n     \r\n      if(props.dimensions.length !== 0) {\r\n      \r\n        props.dimensions.map((dim) =>{\r\n          if(dim[1][1] === \"cube\")\r\n          {  \r\n            console.log(\"cube\",props.dimensions);\r\n           var geometry1 = new THREE.BoxGeometry(dim[6][1],dim[6][1],dim[6][1]);\r\n           var material1 = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n           var boxMesh = new THREE.Mesh(geometry1, material1);\r\n           \r\n          scene.add(boxMesh);\r\n         \r\n          \r\n          boxMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n           \r\n          \r\n         }\r\n         else if(dim[1][1] === \"sphere\")\r\n         {\r\n          console.log(\"sphere\",props.dimensions);\r\n           var geometrys = new THREE.SphereGeometry(dim[6][1],32,32);\r\n           var materials = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n           var sphereMesh = new THREE.Mesh(geometrys,materials);\r\n           scene.add(sphereMesh);\r\n           sphereMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n         }\r\n         else if(dim[1][1] === \"cone\")\r\n         {\r\n           var geometryc = new THREE.ConeGeometry(dim[7][1],dim[6][1],64);\r\n           var materialc = new THREE.MeshBasicMaterial({color:dim[2][1]});\r\n           var coneMesh = new THREE.Mesh(geometryc, materialc);\r\n           scene.add(coneMesh);\r\n           coneMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n         } \r\n     \r\n         else if(dim[1][1] === \"cuboid\")\r\n         {\r\n          \r\n           var geometrycu = new THREE.BoxGeometry(dim[7][1],dim[8][1],dim[6][1]);\r\n           var materialcu = new THREE.MeshLambertMaterial({color:dim[2][1]});\r\n           var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\r\n           \r\n           scene.add(cuboidMesh);\r\n         \r\n          \r\n          cuboidMesh.position.set(dim[3][1],dim[4][1],dim[5][1]);\r\n          \r\n         }\r\n         \r\n        } )\r\n      \r\n    \r\n      }\r\n      console.log(\"Afteraddshapes\",props.dimensions);\r\n    };\r\n     \r\n const start = () => {\r\n    //earthMesh.rotation.x += 0.01;\r\n    earthMesh.rotation.y += 0.01;\r\n    \r\n    renderer.render(scene,camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    requestID = window.requestAnimationFrame(start);\r\n  };\r\n  const handleWindowResize = () => {\r\n    const width = el.clientWidth;\r\n    const height = el.clientHeight;\r\n\r\n    renderer.setSize(width, height);\r\n    camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    camera.updateProjectionMatrix();\r\n  };\r\n\r\n  \r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          el = ref;\r\n        }}\r\n      />\r\n    );\r\n  \r\n}\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}