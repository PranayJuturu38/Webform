{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nclass Figures extends Component {\n  constructor(renderobjects, setrenderobjects) {\n    super(renderobjects, setrenderobjects);\n\n    this.sceneSetup = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 30;\n      this.camera.position.y = 5;\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xffffff, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      light = new THREE.DirectionalLight(0xffffff, 1);\n      this.scene.add(light);\n    };\n\n    this.addearthModels = () => {\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: THREE.ImageUtils.loadTexture(e1),\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\n        bumpScale: 0.005,\n        specularMap: THREE.ImageUtils.loadTexture(e3),\n        specular: new THREE.Color(\"grey\")\n      });\n      this.earthMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(this.earthMesh);\n      this.earthMesh.position.set = (0, 0, 0);\n    };\n\n    this.start = () => {\n      //this.earthMesh.rotation.x += 0.01;\n      this.earthMesh.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n\n      this.requestID = window.requestAnimationFrame(this.start);\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n\n    this.state = {\n      dimensions: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addearthModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: ref => {\n        this.el = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","Figures","constructor","renderobjects","setrenderobjects","sceneSetup","width","el","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","y","controls","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","add","AmbientLight","light","PointLight","set","DirectionalLight","addearthModels","geometry","SphereGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","Mesh","start","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","state","dimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\nclass Figures extends Component {\r\n  constructor(renderobjects,setrenderobjects) {\r\n    super(renderobjects,setrenderobjects);\r\n    this.state = {\r\n      dimensions:\"\"\r\n    };\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.sceneSetup();\r\n    this.addearthModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.dispose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 30;\r\n    this.camera.position.y = 5;\r\n\r\n    this.controls = new OrbitControls(this.camera, this.el);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n    this.scene.add(light);\r\n\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.scene.add(light);\r\n  };\r\n\r\n  addearthModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    this.earthMesh = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    this.earthMesh.position.set = (0, 0, 0);\r\n    \r\n  };\r\n  start = () => {\r\n    //this.earthMesh.rotation.x += 0.01;\r\n    this.earthMesh.rotation.y += 0.01;\r\n\r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    this.requestID = window.requestAnimationFrame(this.start);\r\n  };\r\n  handleWindowResize = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          this.el = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}