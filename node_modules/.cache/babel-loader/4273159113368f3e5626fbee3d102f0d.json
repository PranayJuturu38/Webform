{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\AssignmentRepo\\\\src\\\\Figures.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\nimport e2 from \"./textures/elev_bump_4k.jpg\";\nimport e3 from \"./textures/water_4k.png\";\n\nclass Figures extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.addShapes = () => {\n      console.log(\"addShapes\", this.props.dimensions);\n\n      if (this.props.dimensions.length !== 0) {\n        if (this.props.dimensions[0][1] === \"cube\") {\n          var geometry1 = new THREE.BoxGeometry(this.props.dimensions[5][1], this.props.dimensions[5][1], this.props.dimensions[5][1]);\n          var material1 = new THREE.MeshLambertMaterial({\n            color: this.props.dimensions[1][1]\n          });\n          var boxMesh = new THREE.Mesh(geometry1, material1);\n          this.scene.add(boxMesh);\n          boxMesh.position.set(this.props.dimensions[2][1], this.props.dimensions[3][1], this.props.dimensions[4][1]);\n        } else if (this.props.dimensions[0][1] === \"sphere\") {\n          var geometrys = new THREE.SphereGeometry(this.props.dimensions[5][1], 32, 32);\n          var materials = new THREE.MeshLambertMaterial({\n            color: this.props.dimensions[1][1]\n          });\n          var sphereMesh = new THREE.Mesh(geometrys, materials);\n          this.scene.add(sphereMesh);\n          sphereMesh.position.set(this.props.dimensions[2][1], this.props.dimensions[3][1], this.props.dimensions[4][1]);\n        } else if (this.props.dimensions[0][1] === \"cone\") {\n          var geometryc = new THREE.ConeGeometry(this.props.dimensions[6][1], this.props.dimensions[5][1], 64);\n          var materialc = new THREE.MeshBasicMaterial({\n            color: this.props.dimensions[1][1]\n          });\n          var coneMesh = new THREE.Mesh(geometryc, materialc);\n          this.scene.add(coneMesh);\n          coneMesh.position.set(this.props.dimensions[2][1], this.props.dimensions[3][1], this.props.dimensions[4][1]);\n        } else if (this.props.dimensions[0][1] === \"cuboid\") {\n          var geometrycu = new THREE.BoxGeometry(this.props.dimensions[6][1], this.props.dimensions[7][1], this.props.dimensions[5][1]);\n          var materialcu = new THREE.MeshLambertMaterial({\n            color: this.props.dimensions[1][1]\n          });\n          var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\n          this.scene.add(cuboidMesh);\n          cuboidMesh.position.set(this.props.dimensions[2][1], this.props.dimensions[3][1], this.props.dimensions[4][1]);\n        }\n      }\n    };\n\n    this.sceneSetup = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 30;\n      this.camera.position.y = 5;\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement);\n      this.scene.add(new THREE.AmbientLight(0x333333));\n      var light = new THREE.PointLight(0xffffff, 1);\n      light.position.set(10, 10, 10);\n      this.scene.add(light);\n      var lights = new THREE.AmbientLight(0x333333);\n      this.scene.add(lights);\n      lights.position.set(40, 30, 30);\n      light = new THREE.DirectionalLight(0xffffff, 1);\n      this.scene.add(light);\n    };\n\n    this.addModels = () => {\n      var geometry = new THREE.SphereGeometry(10, 35, 35);\n      var material = new THREE.MeshPhongMaterial({\n        map: THREE.ImageUtils.loadTexture(e1),\n        bumpMap: THREE.ImageUtils.loadTexture(e2),\n        bumpScale: 0.005,\n        specularMap: THREE.ImageUtils.loadTexture(e3),\n        specular: new THREE.Color(\"grey\")\n      });\n      this.earthMesh = new THREE.Mesh(geometry, material);\n      this.scene.add(this.earthMesh);\n      this.earthMesh.position.set(0, 0, 0);\n    };\n\n    this.start = () => {\n      //this.earthMesh.rotation.x += 0.01;\n      this.earthMesh.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n\n      this.requestID = window.requestAnimationFrame(this.start);\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addModels();\n    this.start();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps \", prevProps);\n    console.log(\"prevState \", prevState);\n\n    if (this.props.dimensions !== prevProps.dimensions) {\n      console.log(\"Positions\", this.props.dimensions);\n      this.addShapes();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"1000px\",\n        height: \"692px\"\n      },\n      ref: ref => {\n        this.el = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Figures;","map":{"version":3,"sources":["C:/Users/Dev/Documents/AssignmentRepo/src/Figures.js"],"names":["React","Component","THREE","OrbitControls","e1","e2","e3","Figures","addShapes","console","log","props","dimensions","length","geometry1","BoxGeometry","material1","MeshLambertMaterial","color","boxMesh","Mesh","scene","add","position","set","geometrys","SphereGeometry","materials","sphereMesh","geometryc","ConeGeometry","materialc","MeshBasicMaterial","coneMesh","geometrycu","materialcu","cuboidMesh","sceneSetup","width","el","clientWidth","height","clientHeight","Scene","camera","PerspectiveCamera","z","y","controls","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","AmbientLight","light","PointLight","lights","DirectionalLight","addModels","geometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","specularMap","specular","Color","earthMesh","start","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref"],"mappings":"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","sourcesContent":["import React, { Component}  from \"react\";\r\nimport * as THREE from \"three\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\nimport e1 from \"./textures/2_no_clouds_4k.jpg\";\r\nimport e2 from \"./textures/elev_bump_4k.jpg\";\r\nimport e3 from \"./textures/water_4k.png\";\r\n\r\nclass Figures extends Component {\r\n  componentDidMount() {\r\n    this.sceneSetup();\r\n    this.addModels();\r\n    this.start();\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps \", prevProps);\r\n    console.log(\"prevState \", prevState);\r\n\r\n    if (this.props.dimensions !== prevProps.dimensions) {\r\n\r\n      console.log(\"Positions\",this.props.dimensions);\r\n      this.addShapes();\r\n    }\r\n  }\r\n  addShapes = () =>{\r\n    console.log(\"addShapes\",this.props.dimensions);\r\n    \r\n   \r\n    if(this.props.dimensions.length !== 0) {\r\n     \r\n    \r\n     if(this.props.dimensions[0][1] === \"cube\")\r\n     {  \r\n      var geometry1 = new THREE.BoxGeometry(this.props.dimensions[5][1],this.props.dimensions[5][1],this.props.dimensions[5][1]);\r\n      var material1 = new THREE.MeshLambertMaterial({color:this.props.dimensions[1][1]});\r\n      var boxMesh = new THREE.Mesh(geometry1, material1);\r\n      \r\n      this.scene.add(boxMesh);\r\n    \r\n     \r\n     boxMesh.position.set(this.props.dimensions[2][1],this.props.dimensions[3][1],this.props.dimensions[4][1]);\r\n      \r\n     \r\n    }\r\n    else if(this.props.dimensions[0][1] === \"sphere\")\r\n    {\r\n      var geometrys = new THREE.SphereGeometry(this.props.dimensions[5][1],32,32);\r\n      var materials = new THREE.MeshLambertMaterial({color:this.props.dimensions[1][1]});\r\n      var sphereMesh = new THREE.Mesh(geometrys,materials);\r\n      this.scene.add(sphereMesh);\r\n      sphereMesh.position.set(this.props.dimensions[2][1],this.props.dimensions[3][1],this.props.dimensions[4][1]);\r\n    }\r\n    else if(this.props.dimensions[0][1] === \"cone\")\r\n    {\r\n      var geometryc = new THREE.ConeGeometry(this.props.dimensions[6][1],this.props.dimensions[5][1],64);\r\n      var materialc = new THREE.MeshBasicMaterial({color:this.props.dimensions[1][1]});\r\n      var coneMesh = new THREE.Mesh(geometryc, materialc);\r\n      this.scene.add(coneMesh);\r\n      coneMesh.position.set(this.props.dimensions[2][1],this.props.dimensions[3][1],this.props.dimensions[4][1]);\r\n    } \r\n\r\n    else if(this.props.dimensions[0][1] === \"cuboid\")\r\n    {\r\n     \r\n      var geometrycu = new THREE.BoxGeometry(this.props.dimensions[6][1],this.props.dimensions[7][1],this.props.dimensions[5][1]);\r\n      var materialcu = new THREE.MeshLambertMaterial({color:this.props.dimensions[1][1]});\r\n      var cuboidMesh = new THREE.Mesh(geometrycu, materialcu);\r\n      \r\n      this.scene.add(cuboidMesh);\r\n    \r\n     \r\n     cuboidMesh.position.set(this.props.dimensions[2][1],this.props.dimensions[3][1],this.props.dimensions[4][1]);\r\n     \r\n    }\r\n    \r\n    }\r\n  };\r\n \r\n  \r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.dispose();\r\n  }\r\n\r\n  sceneSetup = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    this.camera.position.z = 30;\r\n    this.camera.position.y = 5;\r\n\r\n    this.controls = new OrbitControls(this.camera, this.el);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setClearColor(\"#000000\");\r\n    this.renderer.setSize(width, height);\r\n    this.el.appendChild(this.renderer.domElement);\r\n\r\n    this.scene.add(new THREE.AmbientLight(0x333333));\r\n    var light = new THREE.PointLight(0xffffff, 1);\r\n    light.position.set(10, 10, 10);\r\n     \r\n    this.scene.add(light);\r\n    var lights = new THREE.AmbientLight(0x333333)\r\n    this.scene.add(lights);\r\n    lights.position.set(40,30,30);\r\n    light = new THREE.DirectionalLight(0xffffff, 1);\r\n    this.scene.add(light);\r\n  };\r\n\r\n  addModels = () => {\r\n    var geometry = new THREE.SphereGeometry(10, 35, 35);\r\n    var material = new THREE.MeshPhongMaterial({\r\n      map: THREE.ImageUtils.loadTexture(e1),\r\n      bumpMap: THREE.ImageUtils.loadTexture(e2),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(e3),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    this.earthMesh = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.earthMesh);\r\n    this.earthMesh.position.set(0, 0, 0);\r\n    \r\n    \r\n    };\r\n  start = () => {\r\n    //this.earthMesh.rotation.x += 0.01;\r\n    this.earthMesh.rotation.y += 0.01;\r\n    \r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\r\n    // an animation and requests that the browser call a specified function\r\n    // to update an animation before the next repaint\r\n    this.requestID = window.requestAnimationFrame(this.start);\r\n  };\r\n  handleWindowResize = () => {\r\n    const width = this.el.clientWidth;\r\n    const height = this.el.clientHeight;\r\n\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ width: \"1000px\", height: \"692px\" }}\r\n        ref={(ref) => {\r\n          this.el = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Figures;\r\n"]},"metadata":{},"sourceType":"module"}